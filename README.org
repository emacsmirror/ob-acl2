#+TITLE: ob-acl2
#+AUTHOR: TANIGUCHI Masaya

This is a library for org-babel to execute ACL2 code.

* Installation

This package is not yet available on MELPA.
But you can install it from GitHub as follows:

#+BEGIN_SRC emacs-lisp
(leaf ob-acl2
  :vc (:url "https://github.com/tani/ob-acl2")
  :config
  (defun ob-acl2-setup ()
    (add-to-list 'org-babel-load-languages '(acl2 . t))
    (add-to-list 'org-src-lang-modes '("acl2" . lisp)))
  (add-hook 'org-mode-hook 'ob-acl2-setup))
#+END_SRC

#+RESULTS:
: ob-acl2

* Usage

You can execute ACL2 code in org-mode as follows:

First, write lisp function in org-mode and evaluate it (=C-c C-c=).

#+BEGIN_SRC acl2 :results output
  (defun factorial (n)
    (if (zp n)
        1
        (* n (factorial (1- n)))))
#+END_SRC

#+RESULTS:
#+begin_example

The event ( DEFUN FACTORIAL ...) is redundant.  See :DOC redundant-
events.

Summary
Form:  ( DEFUN FACTORIAL ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 :REDUNDANT

#+end_example

Yaay! The function FACTORIAL is defined.
Let's prove that the factorial of a positive integer is positive.
Write a theorem and evaluate it.

#+BEGIN_SRC acl2 :results output
  (defthm factorial-positive
    (implies (and (integerp n) (<= 0 n))
             (and (integerp (factorial n))
                  (< 0 (factorial n)))))
#+END_SRC

#+RESULTS:
#+begin_example

The event ( DEFTHM FACTORIAL-POSITIVE ...) is redundant.  See :DOC
redundant-events.

Summary
Form:  ( DEFTHM FACTORIAL-POSITIVE ...)
Rules: NIL
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 :REDUNDANT

#+end_example

The theorem FACTORIAL-POSITIVE is proved.
Now, you have a safe and sound factorial function in ACL2.

* License

Copyright (C) 2022 TANIGUCHI Masaya

This program is licensed under the GNU General Public License version 3.

* Related works

- [[https://github.com/tani/acl2-kernel]] - A jupyter kernel for ACL2
